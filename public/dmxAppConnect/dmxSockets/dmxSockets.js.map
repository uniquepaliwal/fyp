{"version":3,"sources":["core/sockets.js","actions/sockets.js","components/socket.js"],"names":["dmx","__sockets","Object","create","Socket","namespace","socket","domain","scriptNode","document","querySelector","getAttribute","replace","io","transports","on","opts","Actions","options","this","parse","emit","eventName","params","timeout","emitWithAck","Component","initialData","id","connected","disconnected","attributes","type","String","default","methods","data","_socket","request","events","connect","Event","disconnect","connect_error","message","render","init","node","_connectHandler","bind","_disconnectHandler","_connectErrorHandler","_messageHandler","props","onAny","textContent","trim","_config","window","Hjson","JSON","keys","forEach","$param","cb","Flow","run","DataScope","then","err","console","error","destroy","off","offAny","_updateData","set","dispatchEvent","reason"],"mappings":"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","file":"dmxSockets.js","sourcesContent":["dmx.__sockets = Object.create(null);\r\n\r\ndmx.Socket = function (namespace = '/') {\r\n  let socket = dmx.__sockets[namespace];\r\n\r\n  if (!socket) {\r\n    let domain = '';\r\n    const scriptNode = document.querySelector('[src$=\"socket.io/socket.io.js\"]');\r\n\r\n    if (scriptNode) {\r\n      domain = scriptNode.getAttribute('src').replace(/\\/?socket\\.io\\/socket\\.io\\.js/, '');\r\n    }\r\n\r\n    // https://socket.io/docs/v4/client-options/#transports\r\n    socket = io(domain + namespace, {\r\n      transports: ['websocket', 'polling'],\r\n      // withCredentials: true,\r\n    });\r\n\r\n    socket.on('connect_error', () => {\r\n      socket.io.opts.transports = ['polling', 'websocket'];\r\n    });\r\n\r\n    dmx.__sockets[namespace] = socket;\r\n  }\r\n\r\n  return socket;\r\n}\r\n","dmx.Actions({\r\n\r\n  'socket.emit': function (options) {\r\n    options = this.parse(options);\r\n    return dmx.Socket(options.namespace).emit(options.eventName, options.params);\r\n  },\r\n\r\n  'socket.request': function (options) {\r\n    options = this.parse(options);\r\n    return dmx.Socket(options.namespace).timeout(options.timeout || 10000).emitWithAck(options.eventName, options.params);\r\n  },\r\n\r\n});\r\n","dmx.Component('socket', {\r\n\r\n  initialData: {\r\n    id: null,\r\n    connected: false,\r\n    disconnected: true,\r\n  },\r\n\r\n  attributes: {\r\n    namespace: {\r\n      type: String,\r\n      default: '/',\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    emit (eventName, data) {\r\n      return this._socket.emit(eventName, data);\r\n    },\r\n\r\n    request (eventName, data) {\r\n      return this._socket.emitWithAck(eventName, data);\r\n    },\r\n  },\r\n\r\n  events: {\r\n    connect: Event,\r\n    disconnect: Event,\r\n    connect_error: Event,\r\n    message: Event,\r\n  },\r\n\r\n  render: false,\r\n\r\n  init (node) {\r\n    this._connectHandler = this._connectHandler.bind(this);\r\n    this._disconnectHandler = this._disconnectHandler.bind(this);\r\n    this._connectErrorHandler = this._connectErrorHandler.bind(this);\r\n    this._messageHandler = this._messageHandler.bind(this);\r\n\r\n    this._socket = dmx.Socket(this.props.namespace);\r\n    this._socket.on('connect', this._connectHandler);\r\n    this._socket.on('disconnect', this._disconnectHandler);\r\n    this._socket.on('connect_error', this._connectErrorHandler);\r\n    this._socket.onAny(this._messageHandler);\r\n\r\n    if (node.textContent.trim()) {\r\n      try {\r\n        this._config = (window.Hjson ? Hjson : JSON).parse(node.textContent);\r\n        \r\n        Object.keys(this._config).forEach(eventName => {\r\n          this._socket.on(eventName, ($param, cb) => {\r\n            dmx.Flow.run(this._config[eventName], dmx.DataScope({ $param }, this)).then(data => {\r\n              if (typeof cb == 'function') cb(data);\r\n            });\r\n          });\r\n        });\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this._socket.off('connect', this._connectHandler);\r\n    this._socket.off('disconnect', this._disconnectHandler);\r\n    this._socket.off('connect_error', this._connectErrorHandler);\r\n    this._socket.offAny(this._messageHandler);\r\n  },\r\n\r\n  _updateData () {\r\n    const { id, connected, disconnected } = this._socket;\r\n    this.set({ id, connected, disconnected });\r\n  },\r\n\r\n  _connectHandler () {\r\n    this._updateData();\r\n    this.dispatchEvent('connect');\r\n  },\r\n\r\n  _disconnectHandler (reason) {\r\n    this._updateData();\r\n    this.dispatchEvent('disconnect', {}, { reason });\r\n  },\r\n\r\n  _connectErrorHandler (err) {\r\n    this._updateData();\r\n    this.dispatchEvent('connect_error', {}, { message: err.message });\r\n  },\r\n\r\n  _messageHandler (eventName, data) {\r\n    this.dispatchEvent('message', {}, data, eventName);\r\n  },\r\n\r\n});\r\n"]}