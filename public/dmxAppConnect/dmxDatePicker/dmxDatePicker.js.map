{"version":3,"sources":["patch/dateRangePicker.js","components/datePicker.js","components/dateRangePicker.js"],"names":["clickDate","daterangepicker","prototype","event","this","container","find","length","call","dmx","Component","extends","attributes","name","type","String","default","showdropdowns","Boolean","minyear","Number","undefined","maxyear","autoapply","opens","enum","drops","dropsup","showweeknumbers","mindate","maxdate","format","invaliddates","Array","invaliddatesStart","invaliddatesEnd","customdates","customdatesStart","customdatesEnd","customdatesClass","disableweekends","direction","weeklabel","applylabel","cancellabel","timepicker","use24hours","minutesIncrement","utc","events","show","Event","hide","apply","cancel","init","node","_isCustomDate","bind","_isInvalidDate","_updateValue","_applyHandler","_changeHandler","props","_createHiddenInput","removeAttribute","autocomplete","value","_formatDate","defaultValue","_createDaterangePicker","destroy","_daterangepicker","remove","_input","performUpdate","updatedProps","has","size","$node","disabled","_setValue","document","createElement","parentNode","insertBefore","$","parentEl","closest","body","singleDatePicker","autoUpdateInput","autoApply","showWeekNumbers","showDropdowns","minYear","maxYear","minDate","maxDate","locale","weekLabel","applyLabel","cancelLabel","buttonClasses","applyButtonClasses","cancelButtonClasses","isCustomDate","isInvalidDate","timePicker","timePicker24Hour","timePickerIncrement","on","dispatchEvent","data","str","moment","date","isValid","day","some","range","_isInRange","filter","map","start","end","isSameOrAfter","isSameOrBefore","toISOString","prevValue","_updateData","dirty","validate","set","nextTick","validity","valid","validationMessage","setStartDate","Date","setEndDate","startDate","_resetHandler","invalid","initialData","startdate","enddate","separator","unlinked","maxspanYears","maxspanMonths","maxspanWeeks","maxspanDays","methods","setValue","endDate","_input_start","_input_end","_getName","suffix","endsWith","slice","linkedCalendars","maxSpan","_getMaxSpan","prevStart","prevEnd","years","months","weeks","days"],"mappings":";;;;;;AAAA,MAEA,MAAAA,EAAAC,gBAAAC,UAAAF,UACAC,gBAAAC,UAAAF,UAAA,SAAAG,GACA,IAAAC,KAAAC,UAAAC,KAAA,6BAAAC,OACA,OAAAP,EAAAQ,KAAAJ,KAAAD,EACA,CACA,EAPA,GCAAM,IAAAC,UAAA,cAAA,CAEAC,QAAA,eAEAC,WAAA,CACAC,KAAA,CACAC,KAAAC,OACAC,QAAA,IAGAC,cAAA,CACAH,KAAAI,QACAF,SAAA,GAGAG,QAAA,CACAL,KAAAM,OACAJ,aAAAK,GAGAC,QAAA,CACAR,KAAAM,OACAJ,aAAAK,GAGAE,UAAA,CACAT,KAAAI,QACAF,SAAA,GAGAQ,MAAA,CACAV,KAAAC,OACAC,QAAA,QACAS,KAAA,CAAA,OAAA,QAAA,WAGAC,MAAA,CACAZ,KAAAC,OACAC,QAAA,OACAS,KAAA,CAAA,OAAA,KAAA,SAGAE,QAAA,CACAb,KAAAI,QACAF,SAAA,GAGAY,gBAAA,CACAd,KAAAI,QACAF,SAAA,GAGAa,QAAA,CACAf,KAAAC,OACAC,QAAA,IAGAc,QAAA,CACAhB,KAAAC,OACAC,QAAA,IAGAe,OAAA,CACAjB,KAAAC,OACAC,QAAA,MAGAgB,aAAA,CACAlB,KAAAmB,MACAjB,QAAA,IAGAkB,kBAAA,CACApB,KAAAC,OACAC,QAAA,SAGAmB,gBAAA,CACArB,KAAAC,OACAC,QAAA,OAGAoB,YAAA,CACAtB,KAAAmB,MACAjB,QAAA,IAGAqB,iBAAA,CACAvB,KAAAC,OACAC,QAAA,SAGAsB,eAAA,CACAxB,KAAAC,OACAC,QAAA,OAGAuB,iBAAA,CACAzB,KAAAC,OACAC,QAAA,SAGAwB,gBAAA,CACA1B,KAAAI,QACAF,SAAA,GAGAyB,UAAA,CACA3B,KAAAC,OACAC,QAAA,MACAS,KAAA,CAAA,MAAA,QAGAiB,UAAA,CACA5B,KAAAC,OACAC,QAAA,KAGA2B,WAAA,CACA7B,KAAAC,OACAC,QAAA,SAGA4B,YAAA,CACA9B,KAAAC,OACAC,QAAA,UAGA6B,WAAA,CACA/B,KAAAI,QACAF,SAAA,GAGA8B,WAAA,CACAhC,KAAAI,QACAF,SAAA,GAGA+B,iBAAA,CACAjC,KAAAM,OACAJ,QAAA,GAGAgC,IAAA,CACAlC,KAAAI,QACAF,SAAA,IAIAiC,OAAA,CACAC,KAAAC,MACAC,KAAAD,MACAE,MAAAF,MACAG,OAAAH,OAGAI,KAAAC,GACApD,KAAAqD,cAAArD,KAAAqD,cAAAC,KAAAtD,MACAA,KAAAuD,eAAAvD,KAAAuD,eAAAD,KAAAtD,MACAA,KAAAwD,aAAAxD,KAAAwD,aAAAF,KAAAtD,MACAA,KAAAyD,cAAAzD,KAAAyD,cAAAH,KAAAtD,MACAA,KAAA0D,eAAA1D,KAAA0D,eAAAJ,KAAAtD,MAEAK,IAAAC,UAAA,gBAAAR,UAAAqD,KAAA/C,KAAAJ,KAAAoD,GAEApD,KAAA2D,MAAAhC,SACA3B,KAAA2D,MAAAhC,OAAA3B,KAAA2D,MAAAlB,WAAA,OAAA,KAGAzC,KAAA4D,qBAEAR,EAAAS,gBAAA,QACAT,EAAAU,aAAA,MACAV,EAAAW,MAAA/D,KAAAgE,YAAAhE,KAAA2D,MAAAI,QAAA,GACAX,EAAAa,aAAAb,EAAAW,MAEA/D,KAAAkE,wBACA,EAEAC,UACAnE,KAAAoE,kBACApE,KAAAoE,iBAAAC,SAGArE,KAAAsE,QACAtE,KAAAsE,OAAAD,QAEA,EAEAE,cAAAC,GACAA,EAAAC,IAAA,UACAzE,KAAAsE,OAAA7D,KAAAT,KAAA2D,MAAAlD,KACA,IAAA+D,EAAAE,OAGAF,EAAAC,IAAA,cACAzE,KAAA2E,MAAAC,SAAA5E,KAAA2D,MAAAiB,SACA5E,KAAAsE,OAAAM,SAAA5E,KAAA2D,MAAAiB,SACA,IAAAJ,EAAAE,OAGAF,EAAAC,IAAA,WACAzE,KAAA6E,UAAA7E,KAAA2D,MAAAI,OAAA,GACA,IAAAS,EAAAE,QAGA1E,KAAA2D,MAAAhC,SACA3B,KAAA2D,MAAAhC,OAAA3B,KAAA2D,MAAAlB,WAAA,OAAA,KAGAzC,KAAAkE,yBACA,EAEAN,qBACA5D,KAAAsE,OAAAQ,SAAAC,cAAA,SACA/E,KAAAsE,OAAA5D,KAAA,SACAV,KAAAsE,OAAA7D,KAAAT,KAAA2D,MAAAlD,KACAT,KAAAsE,OAAAP,MAAA/D,KAAA2D,MAAAI,MACA/D,KAAAsE,OAAAL,aAAAjE,KAAA2D,MAAAI,MACA/D,KAAA2E,MAAAK,WAAAC,aAAAjF,KAAAsE,OAAAtE,KAAA2E,MACA,EAEAT,yBACA,MAAAS,EAAAO,EAAAlF,KAAA2E,OAEAA,EAAA9E,gBAAA,CACAsF,SAAAR,EAAAS,QAAA,kGAAA,IAAAN,SAAAO,KACAC,kBAAA,EACAC,iBAAA,EACAC,UAAAxF,KAAA2D,MAAAxC,UACAsE,gBAAAzF,KAAA2D,MAAAnC,gBACAkE,cAAA1F,KAAA2D,MAAA9C,cACA8E,QAAA3F,KAAA2D,MAAA5C,QACA6E,QAAA5F,KAAA2D,MAAAzC,QACAE,MAAApB,KAAA2D,MAAAvC,MACAE,MAAAtB,KAAA2D,MAAApC,QAAA,KAAAvB,KAAA2D,MAAArC,MACAuE,QAAA7F,KAAAgE,YAAAhE,KAAA2D,MAAAlC,SACAqE,QAAA9F,KAAAgE,YAAAhE,KAAA2D,MAAAjC,SACAqE,OAAA,CACApE,OAAA3B,KAAA2D,MAAAhC,OACAU,UAAArC,KAAA2D,MAAAtB,UACA2D,UAAAhG,KAAA2D,MAAArB,UACA2D,WAAAjG,KAAA2D,MAAApB,WACA2D,YAAAlG,KAAA2D,MAAAnB,aAEA2D,cAAA,GACAC,mBAAA,GACAC,oBAAA,GACAC,aAAAtG,KAAAqD,cACAkD,cAAAvG,KAAAuD,eACAiD,WAAAxG,KAAA2D,MAAAlB,WACAgE,iBAAAzG,KAAA2D,MAAAjB,WACAgE,oBAAA1G,KAAA2D,MAAAhB,kBACA3C,KAAAwD,cAEAmB,EAAAgC,GAAA,wBAAA3G,KAAAyD,eACAkB,EAAAgC,GAAA,yBAAA3G,KAAA0D,gBAEAiB,EAAAgC,GAAA,uBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,SACA2E,EAAAgC,GAAA,uBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,SACA2E,EAAAgC,GAAA,wBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,UACA2E,EAAAgC,GAAA,yBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,WAEAA,KAAAoE,iBAAAO,EAAAkC,KAAA,kBACA,EAEA7C,YAAA8C,GACA,IAAAA,EAAA,OACA,GAAA,OAAAA,GAAA,SAAAA,EAAA,OAAAC,SAAApF,OAAA3B,KAAA2D,MAAAhC,QACA,MAAAqF,EAAAD,OAAAD,GACA,OAAAE,EAAAC,UAAAD,EAAArF,OAAA3B,KAAA2D,MAAAhC,aAAAV,CACA,EAEAsC,eAAAyD,GACA,SAAAhH,KAAA2D,MAAAvB,iBAAA,IAAA4E,EAAAE,OAAA,IAAAF,EAAAE,QACAlH,KAAA2D,MAAA/B,aAAAuF,MAAAC,GAAApH,KAAAqH,WAAAL,EAAAI,EAAApH,KAAA2D,MAAA7B,kBAAA9B,KAAA2D,MAAA5B,kBACA,EAEAsB,cAAA2D,GACA,OAAAhH,KAAA2D,MAAA3B,YAAAsF,QAAAF,GAAApH,KAAAqH,WAAAL,EAAAI,EAAApH,KAAA2D,MAAA1B,iBAAAjC,KAAA2D,MAAAzB,kBAAAqF,KAAAH,GAAAA,EAAApH,KAAA2D,MAAAxB,mBACA,EAEAkF,WAAA,CAAAL,EAAAI,EAAAI,EAAAC,IACAL,EAAAI,IAAAJ,EAAAK,GAAAT,EAAAU,cAAAN,EAAAI,KAAAR,EAAAW,eAAAP,EAAAK,IACAL,EAAAI,GAAAR,EAAAU,cAAAN,EAAAI,MACAJ,EAAAK,IAAAT,EAAAW,eAAAP,EAAAK,IAIAjE,aAAAwD,GACA,IAAAjD,EAAA/D,KAAA2D,MAAAlB,WAAAzC,KAAA2D,MAAAf,IAAAoE,EAAAY,cAAAZ,EAAArF,OAAA,uBAAAqF,EAAArF,OAAA,cACAkG,EAAA7H,KAAA6G,KAAA9C,MACA/D,KAAA6E,UAAAd,GAEA8D,IAAA7H,KAAA6G,KAAA9C,QACA/D,KAAA4G,cAAA,UACA5G,KAAA4G,cAAA,WAEA,EAEAkB,YAAA/H,GACAA,GAAAC,KAAA2E,MAAAoD,OACA1H,IAAA2H,SAAAhI,KAAA2E,OAGA3E,KAAAiI,IAAA,WAAAjI,KAAA2E,MAAAC,UACA5E,KAAAsE,OAAAP,QAAA/D,KAAA6G,KAAA9C,QACA/D,KAAAiI,IAAA,QAAAjI,KAAAsE,OAAAP,OACA1D,IAAA6H,UAAA,IAAAlI,KAAA4G,cAAA,cAGA5G,KAAA2E,MAAAoD,QACA/H,KAAAiI,IAAA,WAAAjI,KAAA2E,MAAAwD,SAAAC,OACApI,KAAAiI,IAAA,oBAAAjI,KAAA2E,MAAA0D,mBAEA,EAEAxD,UAAAd,EAAAE,GACA,iBAAAF,IAAAA,EAAA,IAEA,OAAAA,GAAA,SAAAA,IAEAA,EADA/D,KAAA2D,MAAAlB,WACAzC,KAAA2D,MAAAf,IAAAmE,SAAAa,cAAAb,SAAApF,OAAA,uBAEAoF,SAAApF,OAAA,eAIA3B,KAAAoE,iBAAAkE,aAAAtI,KAAAgE,YAAAD,IAAA,IAAAwE,MACAvI,KAAAoE,iBAAAoE,WAAAxI,KAAAgE,YAAAD,IAAA,IAAAwE,MAEAvI,KAAA2E,MAAAZ,MAAA/D,KAAAgE,YAAAD,IAAA,GACA/D,KAAAsE,OAAAP,MAAAA,GAAA,GAEAE,IACAjE,KAAA2E,MAAAV,aAAAjE,KAAA2E,MAAAZ,MACA/D,KAAAsE,OAAAL,aAAAjE,KAAAsE,OAAAP,OAGA/D,KAAA8H,aAAA,EACA,EAEArE,cAAA1D,GACAC,KAAAwD,aAAAxD,KAAAoE,iBAAAqE,UACA,EAEA/E,eAAA3D,GACAC,KAAA2E,MAAAZ,OAAAgD,OAAA/G,KAAA2E,MAAAZ,MAAA/D,KAAA2D,MAAAhC,QAAAsF,UAGAjH,KAAA2D,MAAAlB,WACAzC,KAAA2D,MAAAf,IACA5C,KAAA6E,UAAAkC,OAAA/G,KAAA2E,MAAAZ,MAAA/D,KAAA2D,MAAAhC,QAAAiG,eAEA5H,KAAA6E,UAAAkC,OAAA/G,KAAA2E,MAAAZ,MAAA/D,KAAA2D,MAAAhC,QAAAA,OAAA,wBAGA3B,KAAA6E,UAAAkC,OAAA/G,KAAA2E,MAAAZ,MAAA/D,KAAA2D,MAAAhC,QAAAA,OAAA,eATA3B,KAAA6E,UAAA,GAYA,EAEA6D,cAAA3I,GACAC,KAAA2E,QACA3E,KAAA2E,MAAAoD,OAAA,EACA/H,KAAAiI,IAAA,CACAU,SAAA,EACAN,kBAAA,KAEAhI,IAAA6H,UAAA,KACAlI,KAAA2E,OACA3E,KAAA0D,gBAAA,IAEA,ICrXArD,IAAAC,UAAA,oBAAA,CAEAC,QAAA,cAEAqI,YAAA,CACApB,MAAA,GACAC,IAAA,IAGAjH,WAAA,CACAqI,UAAA,CACAnI,KAAAC,OACAC,QAAA,IAGAkI,QAAA,CACApI,KAAAC,OACAC,QAAA,IAGAO,UAAA,CACAT,KAAAI,QACAF,SAAA,GAGAmI,UAAA,CACArI,KAAAC,OACAC,QAAA,OAGAoI,SAAA,CACAtI,KAAAI,QACAF,SAAA,GAGAqI,aAAA,CACAvI,KAAAM,OACAJ,QAAA,MAGAsI,cAAA,CACAxI,KAAAM,OACAJ,QAAA,MAGAuI,aAAA,CACAzI,KAAAM,OACAJ,QAAA,MAGAwI,YAAA,CACA1I,KAAAM,OACAJ,QAAA,OAIAyI,QAAA,CACAC,SAAAb,EAAAc,GACAvJ,KAAA6E,UAAA4D,EAAAc,EACA,GAGApG,KAAAC,GACA/C,IAAAC,UAAA,eAAAR,UAAAqD,KAAA/C,KAAAJ,KAAAoD,GAEApD,KAAA6E,UAAA,CAAA2C,MAAAxH,KAAA2D,MAAAkF,UAAApB,IAAAzH,KAAA2D,MAAAmF,UAAA,EACA,EAEA3E,UACAnE,KAAAoE,kBACApE,KAAAoE,iBAAAC,SAGArE,KAAAsE,QACAtE,KAAAsE,OAAAD,SAGArE,KAAAwJ,cACAxJ,KAAAwJ,aAAAnF,SAGArE,KAAAyJ,YACAzJ,KAAAyJ,WAAApF,QAEA,EAEAE,cAAAC,GACA,KAAAA,EAAAC,IAAA,UACAzE,KAAAsE,OAAA7D,KAAAT,KAAA2D,MAAAlD,KACAT,KAAAwJ,aAAA/I,KAAAT,KAAA0J,SAAA,UACA1J,KAAAyJ,WAAAhJ,KAAAT,KAAA0J,SAAA,QACA,IAAAlF,EAAAE,OAGAF,EAAAC,IAAA,cACAzE,KAAA2E,MAAAC,SAAA5E,KAAA2D,MAAAiB,SACA5E,KAAAsE,OAAAM,SAAA5E,KAAA2D,MAAAiB,SACA5E,KAAAwJ,aAAA5E,SAAA5E,KAAA2D,MAAAiB,SACA5E,KAAAyJ,WAAA7E,SAAA5E,KAAA2D,MAAAiB,SACA,IAAAJ,EAAAE,OALA,CAQA,GAAAF,EAAAC,IAAA,cAAAD,EAAAC,IAAA,WAAA,CAEA,GADAzE,KAAA6E,UAAA,CAAA2C,MAAAxH,KAAA2D,MAAAkF,UAAApB,IAAAzH,KAAA2D,MAAAmF,UAAA,GACAtE,EAAAC,IAAA,cAAAD,EAAAC,IAAA,YAAA,IAAAD,EAAAE,KAAA,OACA,GAAA,IAAAF,EAAAE,KAAA,MACA,CAEA1E,KAAA2D,MAAAhC,SACA3B,KAAA2D,MAAAhC,OAAA3B,KAAA2D,MAAAlB,WAAA,OAAA,KAGAzC,KAAAkE,wBAZA,CAaA,EAEAN,qBACAvD,IAAAC,UAAA,eAAAR,UAAA8D,mBAAAxD,KAAAJ,MAEAA,KAAAwJ,aAAA1E,SAAAC,cAAA,SACA/E,KAAAwJ,aAAA9I,KAAA,SACAV,KAAAwJ,aAAA/I,KAAAT,KAAA0J,SAAA,UACA1J,KAAA2E,MAAAK,WAAAC,aAAAjF,KAAAwJ,aAAAxJ,KAAA2E,OAEA3E,KAAAyJ,WAAA3E,SAAAC,cAAA,SACA/E,KAAAyJ,WAAA/I,KAAA,SACAV,KAAAyJ,WAAAhJ,KAAAT,KAAA0J,SAAA,QACA1J,KAAA2E,MAAAK,WAAAC,aAAAjF,KAAAyJ,WAAAzJ,KAAA2E,MACA,EAEA+E,SAAAC,GACA,OAAA3J,KAAA2D,MAAAlD,KAAAmJ,SAAA,KACA5J,KAAA2D,MAAAlD,KAAAoJ,MAAA,GAAA,GAAAF,EAAA,IAEA3J,KAAA2D,MAAAlD,KAAAkJ,CACA,EAEAzF,yBACA,MAAAS,EAAAO,EAAAlF,KAAA2E,OAEAA,EAAA9E,gBAAA,CACAsF,SAAAR,EAAAS,QAAA,sBAAA,IAAAN,SAAAO,KACAE,iBAAA,EACAC,UAAAxF,KAAA2D,MAAAxC,UACA2I,iBAAA9J,KAAA2D,MAAAqF,SACAvD,gBAAAzF,KAAA2D,MAAAnC,gBACAkE,cAAA1F,KAAA2D,MAAA9C,cACA8E,QAAA3F,KAAA2D,MAAA5C,QACA6E,QAAA5F,KAAA2D,MAAAzC,QACAE,MAAApB,KAAA2D,MAAAvC,MACAE,MAAAtB,KAAA2D,MAAApC,QAAA,KAAAvB,KAAA2D,MAAArC,MACAuE,QAAA7F,KAAAgE,YAAAhE,KAAA2D,MAAAlC,SACAqE,QAAA9F,KAAAgE,YAAAhE,KAAA2D,MAAAjC,SACAqI,QAAA/J,KAAAgK,cACAjE,OAAA,CACApE,OAAA3B,KAAA2D,MAAAhC,OACAoH,UAAA/I,KAAA2D,MAAAoF,UACA1G,UAAArC,KAAA2D,MAAAtB,UACA2D,UAAAhG,KAAA2D,MAAArB,UACA2D,WAAAjG,KAAA2D,MAAApB,WACA2D,YAAAlG,KAAA2D,MAAAnB,aAEA2D,cAAA,GACAC,mBAAA,GACAC,oBAAA,GACAC,aAAAtG,KAAAqD,cACAkD,cAAAvG,KAAAuD,eACAiD,WAAAxG,KAAA2D,MAAAlB,WACAgE,iBAAAzG,KAAA2D,MAAAjB,WACAgE,oBAAA1G,KAAA2D,MAAAhB,kBACA3C,KAAAwD,cAEAmB,EAAAgC,GAAA,wBAAA3G,KAAAyD,eACAkB,EAAAgC,GAAA,yBAAA3G,KAAA0D,gBAEAiB,EAAAgC,GAAA,uBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,SACA2E,EAAAgC,GAAA,uBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,SACA2E,EAAAgC,GAAA,wBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,UACA2E,EAAAgC,GAAA,yBAAA3G,KAAA4G,cAAAtD,KAAAtD,KAAA,WAEAA,KAAAoE,iBAAAO,EAAAkC,KAAA,kBACA,EAEArD,aAAAiF,EAAAc,GACA,IAAA/B,EAAAxH,KAAA2D,MAAAlB,WAAAzC,KAAA2D,MAAAf,IAAA6F,EAAAb,cAAAa,EAAA9G,OAAA,uBAAA3B,KAAA2D,MAAAf,IAAA6F,EAAAb,cAAAa,EAAA9G,OAAA,cACA8F,EAAAzH,KAAA2D,MAAAlB,WAAAzC,KAAA2D,MAAAf,IAAA2G,EAAA3B,cAAA2B,EAAA5H,OAAA,uBAAA3B,KAAA2D,MAAAf,IAAA2G,EAAA3B,cAAA2B,EAAA5H,OAAA,cACAsI,EAAAjK,KAAA6G,KAAAW,MACA0C,EAAAlK,KAAA6G,KAAAY,IAEAzH,KAAA6E,UAAA,CAAA2C,QAAAC,QAEAzH,KAAA6G,KAAA9C,QAAAkG,GAAAjK,KAAA6G,KAAA9C,QAAAmG,IACAlK,KAAA4G,cAAA,UACA5G,KAAA4G,cAAA,WAEA,EAEAkB,YAAA/H,GACAA,GAAAC,KAAA2E,MAAAoD,OACA1H,IAAA2H,SAAAhI,KAAA2E,OAGA3E,KAAAiI,IAAA,WAAAjI,KAAA2E,MAAAC,UACA5E,KAAAsE,OAAAP,QAAA/D,KAAA6G,KAAA9C,OAAA/D,KAAAwJ,eAAAxJ,KAAA6G,KAAAW,OAAAxH,KAAAyJ,aAAAzJ,KAAA6G,KAAAY,MACAzH,KAAAiI,IAAA,CACAlE,MAAA/D,KAAAsE,OAAAP,MACAyD,MAAAxH,KAAAwJ,aAAAzF,MACA0D,IAAAzH,KAAAyJ,WAAA1F,QAEA1D,IAAA6H,UAAA,IAAAlI,KAAA4G,cAAA,cAGA5G,KAAA2E,MAAAoD,QACA/H,KAAAiI,IAAA,WAAAjI,KAAA2E,MAAAwD,SAAAC,OACApI,KAAAiI,IAAA,oBAAAjI,KAAA2E,MAAA0D,mBAEA,EAEAxD,UAAAd,EAAAE,GACA,IAAAuD,MAAAA,EAAA,GAAAC,IAAAA,EAAA,IAAA1D,EAEA,iBAAAyD,IAAAA,EAAA,IACA,iBAAAC,IAAAA,EAAA,IAEA,OAAAD,GAAA,SAAAA,IACAA,EAAAxH,KAAA2D,MAAAlB,WAAAzC,KAAA2D,MAAAf,IAAAmE,SAAAa,cAAAb,SAAApF,OAAA,uBAAAoF,SAAApF,OAAA,eAGA,OAAA8F,GAAA,SAAAA,IACAA,EAAAzH,KAAA2D,MAAAlB,WAAAzC,KAAA2D,MAAAf,IAAAmE,SAAAa,cAAAb,SAAApF,OAAA,uBAAAoF,SAAApF,OAAA,eAGA6F,GACAxH,KAAAoE,iBAAAkE,aAAAtI,KAAAgE,YAAAwD,IAGAC,GACAzH,KAAAoE,iBAAAoE,WAAAxI,KAAAgE,YAAAyD,IAGAzH,KAAA2E,MAAAZ,MAAAyD,GAAAC,EAAAzH,KAAAgE,YAAAwD,GAAAxH,KAAA2D,MAAAoF,UAAA/I,KAAAgE,YAAAyD,GAAA,GACAzH,KAAAsE,OAAAP,MAAAyD,GAAAC,EAAAD,EAAA,IAAAC,EAAA,GACAzH,KAAAwJ,aAAAzF,MAAAyD,GAAA,GACAxH,KAAAyJ,WAAA1F,MAAA0D,GAAA,GAEAxD,IACAjE,KAAA2E,MAAAV,aAAAjE,KAAA2E,MAAAZ,MACA/D,KAAAsE,OAAAL,aAAAjE,KAAAsE,OAAAP,MACA/D,KAAAwJ,aAAAvF,aAAAjE,KAAAwJ,aAAAzF,MACA/D,KAAAyJ,WAAAxF,aAAAjE,KAAAyJ,WAAA1F,OAGA/D,KAAA8H,aAAA,EACA,EAEAkC,cACA,MAAAf,aAAAkB,EAAAjB,cAAAkB,EAAAjB,aAAAkB,EAAAjB,YAAAkB,GAAAtK,KAAA2D,MAEA,GAAAwG,GAAAC,GAAAC,GAAAC,EACA,MAAA,CAAAH,QAAAC,SAAAC,QAAAC,OAEA,EAEA7G,cAAA1D,GACA,MAAAkK,EAAAjK,KAAA6G,KAAAW,MACA0C,EAAAlK,KAAA6G,KAAAY,IAEAzH,KAAAwD,aAAAxD,KAAAoE,iBAAAqE,UAAAzI,KAAAoE,iBAAAmF,SAEAvJ,KAAAwJ,aAAAzF,QAAAkG,GAAAjK,KAAAyJ,WAAA1F,QAAAmG,GACAlK,KAAA4G,cAAA,UAEA","file":"dmxDatePicker.js","sourcesContent":["(() => {\r\n  // patch original clickDate method to disallow selecting range with invalid dates in it\r\n  const clickDate = daterangepicker.prototype.clickDate;\r\n  daterangepicker.prototype.clickDate = function (event) {\r\n    if (this.container.find('.in-range:not(.available)').length) return;\r\n    return clickDate.call(this, event);\r\n  };\r\n})();","dmx.Component('date-picker', {\r\n\r\n  extends: 'form-element',\r\n\r\n  attributes: {\r\n    name: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    showdropdowns: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    minyear: {\r\n      type: Number,\r\n      default: undefined,\r\n    },\r\n\r\n    maxyear: {\r\n      type: Number,\r\n      default: undefined,\r\n    },\r\n\t\r\n\t  autoapply: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\t\r\n    opens: {\r\n      type: String,\r\n      default: 'right',\r\n      enum: ['left', 'right', 'center'],\r\n    },\r\n\r\n    drops: {\r\n      type: String,\r\n      default: 'down',\r\n      enum: ['down', 'up', 'auto'],\r\n    },\r\n\r\n    dropsup: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    showweeknumbers: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    mindate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    maxdate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    format: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    invaliddates: {\r\n      type: Array,\r\n      default: [],\r\n    },\r\n\r\n    invaliddatesStart: {\r\n      type: String,\r\n      default: 'start',\r\n    },\r\n\r\n    invaliddatesEnd: {\r\n      type: String,\r\n      default: 'end',\r\n    },\r\n\r\n    customdates: {\r\n      type: Array,\r\n      default: [],\r\n    },\r\n\r\n    customdatesStart: {\r\n      type: String,\r\n      default: 'start',\r\n    },\r\n\r\n    customdatesEnd: {\r\n      type: String,\r\n      default: 'end',\r\n    },\r\n\r\n    customdatesClass: {\r\n      type: String,\r\n      default: 'class',\r\n    },\r\n\r\n    disableweekends: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    direction: {\r\n      type: String,\r\n      default: 'ltr',\r\n      enum: ['ltr', 'rtl'],\r\n    },\r\n\r\n    weeklabel: {\r\n      type: String,\r\n      default: 'W',\r\n    },\r\n\r\n    applylabel: {\r\n      type: String,\r\n      default: 'Apply',\r\n    },\r\n\r\n    cancellabel: {\r\n      type: String,\r\n      default: 'Cancel',\r\n    },\r\n\r\n    timepicker: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    use24hours: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    minutesIncrement: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n\r\n    utc: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  events: {\r\n    show: Event,\r\n    hide: Event,\r\n    apply: Event,\r\n    cancel: Event,\r\n  },\r\n\r\n  init (node) {\r\n    this._isCustomDate = this._isCustomDate.bind(this);\r\n    this._isInvalidDate = this._isInvalidDate.bind(this);\r\n    this._updateValue = this._updateValue.bind(this);\r\n    this._applyHandler = this._applyHandler.bind(this);\r\n    this._changeHandler = this._changeHandler.bind(this);\r\n\r\n    dmx.Component('form-element').prototype.init.call(this, node);\r\n\r\n    if (!this.props.format) {\r\n      this.props.format = this.props.timepicker ? 'L LT' : 'L';\r\n    }\r\n\r\n    this._createHiddenInput();\r\n\r\n    node.removeAttribute('name');\r\n    node.autocomplete = 'off';\r\n    node.value = this._formatDate(this.props.value) || '';\r\n    node.defaultValue = node.value;\r\n   \r\n    this._createDaterangePicker();\r\n  },\r\n\r\n  destroy () {\r\n    if (this._daterangepicker) {\r\n      this._daterangepicker.remove();\r\n    }\r\n\r\n    if (this._input) {\r\n      this._input.remove();\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('name')) {\r\n      this._input.name = this.props.name;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('disabled')) {\r\n      this.$node.disabled = this.props.disabled;\r\n      this._input.disabled = this.props.disabled;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('value')) {\r\n      this._setValue(this.props.value, true);\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (!this.props.format) {\r\n      this.props.format = this.props.timepicker ? 'L LT' : 'L';\r\n    }\r\n\r\n    this._createDaterangePicker();\r\n  },\r\n\r\n  _createHiddenInput () {\r\n    this._input = document.createElement('input');\r\n    this._input.type = 'hidden';\r\n    this._input.name = this.props.name;\r\n    this._input.value = this.props.value;\r\n    this._input.defaultValue = this.props.value;\r\n    this.$node.parentNode.insertBefore(this._input, this.$node);\r\n  },\r\n\r\n  _createDaterangePicker () {\r\n    const $node = $(this.$node);\r\n\r\n    $node.daterangepicker({\r\n      parentEl: $node.closest('.modal, .offcanvas, .offcanvas-sm, .offcanvas-md, .offcanvas-lg, .offcanvas-xl, .offcanvas-xxl')[0] || document.body,\r\n      singleDatePicker: true,\r\n      autoUpdateInput: false,\r\n\t    autoApply: this.props.autoapply,\r\n      showWeekNumbers: this.props.showweeknumbers,\r\n      showDropdowns: this.props.showdropdowns,\r\n      minYear: this.props.minyear,\r\n      maxYear: this.props.maxyear,\r\n      opens: this.props.opens,\r\n      drops: this.props.dropsup ? 'up' : this.props.drops,\r\n      minDate: this._formatDate(this.props.mindate),\r\n      maxDate: this._formatDate(this.props.maxdate),\r\n      locale: {\r\n        format: this.props.format,\r\n        direction: this.props.direction,\r\n        weekLabel: this.props.weeklabel,\r\n        applyLabel: this.props.applylabel,\r\n        cancelLabel: this.props.cancellabel,\r\n      },\r\n      buttonClasses: '',\r\n      applyButtonClasses: '',\r\n      cancelButtonClasses: '',\r\n      isCustomDate: this._isCustomDate,\r\n      isInvalidDate: this._isInvalidDate,\r\n      timePicker: this.props.timepicker,\r\n      timePicker24Hour: this.props.use24hours,\r\n      timePickerIncrement: this.props.minutesIncrement,\r\n    }, this._updateValue);\r\n\r\n    $node.on('apply.daterangepicker', this._applyHandler);\r\n    $node.on('change.daterangepicker', this._changeHandler);\r\n\r\n    $node.on('show.daterangepicker', this.dispatchEvent.bind(this, 'show'));\r\n    $node.on('hide.daterangepicker', this.dispatchEvent.bind(this, 'hide'));\r\n    $node.on('apply.daterangepicker', this.dispatchEvent.bind(this, 'apply'));\r\n    $node.on('cancel.daterangepicker', this.dispatchEvent.bind(this, 'cancel'));\r\n\r\n    this._daterangepicker = $node.data('daterangepicker');\r\n  },\r\n\r\n  _formatDate (str) {\r\n    if (!str) return undefined;\r\n    if (str == 'now' || str == 'today') return moment().format(this.props.format);\r\n    const date = moment(str);\r\n    return date.isValid() ? date.format(this.props.format) : undefined;\r\n  },\r\n\r\n  _isInvalidDate (date) {\r\n    if (this.props.disableweekends && (date.day() === 0 || date.day() === 6)) return true;\r\n    return this.props.invaliddates.some(range => this._isInRange(date, range, this.props.invaliddatesStart, this.props.invaliddatesEnd));\r\n  },\r\n\r\n  _isCustomDate (date) {\r\n    return this.props.customdates.filter(range => this._isInRange(date, range, this.props.customdatesStart, this.props.customdatesEnd)).map(range => range[this.props.customdatesClass]);\r\n  },  \r\n\r\n  _isInRange (date, range, start, end) {\r\n    if (range[start] && range[end]) return date.isSameOrAfter(range[start]) && date.isSameOrBefore(range[end]);\r\n    if (range[start]) return date.isSameOrAfter(range[start]);\r\n    if (range[end]) return date.isSameOrBefore(range[end]);\r\n    return false;\r\n  },\r\n\r\n  _updateValue (date) {\r\n    let value = this.props.timepicker ? this.props.utc ? date.toISOString() : date.format('YYYY-MM-DD HH:mm:ss') : date.format('YYYY-MM-DD');\r\n    let prevValue = this.data.value;\r\n    this._setValue(value);\r\n\r\n    if (prevValue !== this.data.value) {\r\n      this.dispatchEvent('change');\r\n      this.dispatchEvent('changed');\r\n    }\r\n  },\r\n\r\n  _updateData (event) {\r\n    if (event && this.$node.dirty) {\r\n      dmx.validate(this.$node);\r\n    }\r\n\r\n    this.set('disabled', this.$node.disabled);\r\n    if (this._input.value !== this.data.value) {\r\n      this.set('value', this._input.value);\r\n      dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n    }\r\n\r\n    if (this.$node.dirty) {\r\n      this.set('invalid', !this.$node.validity.valid);\r\n      this.set('validationMessage', this.$node.validationMessage);\r\n    }\r\n  },\r\n\r\n  _setValue (value, defaultValue) {\r\n    if (typeof value !== 'string') value = '';\r\n    \r\n    if (value == 'now' || value == 'today') {\r\n      if (this.props.timepicker) {\r\n        value = this.props.utc ? moment().toISOString() : moment().format('YYYY-MM-DD HH:mm:ss');\r\n      } else {\r\n        value = moment().format('YYYY-MM-DD');\r\n      }\r\n    }\r\n\r\n    this._daterangepicker.setStartDate(this._formatDate(value) || new Date());\r\n    this._daterangepicker.setEndDate(this._formatDate(value) || new Date());\r\n\r\n    this.$node.value = this._formatDate(value) || '';\r\n    this._input.value = value || '';\r\n\r\n    if (defaultValue) {\r\n      this.$node.defaultValue = this.$node.value;\r\n      this._input.defaultValue = this._input.value;\r\n    }  \r\n\r\n    this._updateData(true);\r\n  },\r\n\r\n  _applyHandler (event) {\r\n    this._updateValue(this._daterangepicker.startDate);\r\n  },\r\n\r\n  _changeHandler (event) {\r\n    if (!this.$node.value || !moment(this.$node.value, this.props.format).isValid()) {\r\n      this._setValue('');\r\n    } else {\r\n      if (this.props.timepicker) {\r\n        if (this.props.utc) {\r\n          this._setValue(moment(this.$node.value, this.props.format).toISOString());\r\n        } else {\r\n          this._setValue(moment(this.$node.value, this.props.format).format('YYYY-MM-DD HH:mm:ss'));\r\n        }\r\n      } else {\r\n        this._setValue(moment(this.$node.value, this.props.format).format('YYYY-MM-DD'));\r\n      }\r\n    }\r\n  },\r\n\r\n  _resetHandler (event) {\r\n    if (!this.$node) return;\r\n    this.$node.dirty = false;\r\n    this.set({\r\n      invalid: false,\r\n      validationMessage: '',\r\n    });\r\n    dmx.nextTick(() => {\r\n      if (!this.$node) return;\r\n      this._changeHandler()\r\n    });\r\n  },\r\n\r\n});\r\n","dmx.Component('date-range-picker', {\r\n\r\n  extends: 'date-picker',\r\n\r\n  initialData: {\r\n    start: '',\r\n    end: '',\r\n  },\r\n\r\n  attributes: {\r\n    startdate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    enddate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    autoapply: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    separator: {\r\n      type: String,\r\n      default: ' - ',\r\n    },\r\n\r\n    unlinked: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    maxspanYears: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxspanMonths: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxspanWeeks: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxspanDays: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    setValue (startDate, endDate) {\r\n      this._setValue(startDate, endDate);\r\n    },\r\n  },\r\n\r\n  init (node) {\r\n    dmx.Component('date-picker').prototype.init.call(this, node);\r\n    \r\n    this._setValue({ start: this.props.startdate, end: this.props.enddate }, true);\r\n  },\r\n\r\n  destroy () {\r\n    if (this._daterangepicker) {\r\n      this._daterangepicker.remove();\r\n    }\r\n\r\n    if (this._input) {\r\n      this._input.remove();\r\n    }\r\n\r\n    if (this._input_start) {\r\n      this._input_start.remove();\r\n    }\r\n\r\n    if (this._input_end) {\r\n      this._input_end.remove();\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('name')) {\r\n      this._input.name = this.props.name;\r\n      this._input_start.name = this._getName('_start');\r\n      this._input_end.name = this._getName('_end');\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('disabled')) {\r\n      this.$node.disabled = this.props.disabled;\r\n      this._input.disabled = this.props.disabled;\r\n      this._input_start.disabled = this.props.disabled;\r\n      this._input_end.disabled = this.props.disabled;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('startdate') || updatedProps.has('enddate')) {\r\n      this._setValue({ start: this.props.startdate, end: this.props.enddate }, true);\r\n      if (updatedProps.has('startdate') && updatedProps.has('enddate') && updatedProps.size === 2) return;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (!this.props.format) {\r\n      this.props.format = this.props.timepicker ? 'L LT' : 'L';\r\n    }\r\n\r\n    this._createDaterangePicker();\r\n  },\r\n\r\n  _createHiddenInput () {\r\n    dmx.Component('date-picker').prototype._createHiddenInput.call(this);\r\n\r\n    this._input_start = document.createElement('input');\r\n    this._input_start.type = 'hidden';\r\n    this._input_start.name = this._getName('_start');\r\n    this.$node.parentNode.insertBefore(this._input_start, this.$node);\r\n\r\n    this._input_end = document.createElement('input');\r\n    this._input_end.type = 'hidden';\r\n    this._input_end.name = this._getName('_end');\r\n    this.$node.parentNode.insertBefore(this._input_end, this.$node);\r\n  },\r\n\r\n  _getName (suffix) {\r\n    if (this.props.name.endsWith(']')) {\r\n      return this.props.name.slice(0, -1) + suffix + ']';\r\n    }\r\n    return this.props.name + suffix;\r\n  },\r\n\r\n  _createDaterangePicker () {\r\n    const $node = $(this.$node);\r\n\r\n    $node.daterangepicker({\r\n      parentEl: $node.closest('.modal, .offcanvas')[0] || document.body,\r\n      autoUpdateInput: false,\r\n      autoApply: this.props.autoapply,\r\n      linkedCalendars: !this.props.unlinked,\r\n      showWeekNumbers: this.props.showweeknumbers,\r\n      showDropdowns: this.props.showdropdowns,\r\n      minYear: this.props.minyear,\r\n      maxYear: this.props.maxyear,\r\n      opens: this.props.opens,\r\n      drops: this.props.dropsup ? 'up' : this.props.drops,\r\n      minDate: this._formatDate(this.props.mindate),\r\n      maxDate: this._formatDate(this.props.maxdate),\r\n      maxSpan: this._getMaxSpan(),\r\n      locale: {\r\n        format: this.props.format,\r\n        separator: this.props.separator,\r\n        direction: this.props.direction,\r\n        weekLabel: this.props.weeklabel,\r\n        applyLabel: this.props.applylabel,\r\n        cancelLabel: this.props.cancellabel,\r\n      },\r\n      buttonClasses: '',\r\n      applyButtonClasses: '',\r\n      cancelButtonClasses: '',\r\n      isCustomDate: this._isCustomDate,\r\n      isInvalidDate: this._isInvalidDate,\r\n      timePicker: this.props.timepicker,\r\n      timePicker24Hour: this.props.use24hours,\r\n      timePickerIncrement: this.props.minutesIncrement,\r\n    }, this._updateValue);\r\n\r\n    $node.on('apply.daterangepicker', this._applyHandler);\r\n    $node.on('change.daterangepicker', this._changeHandler);\r\n\r\n    $node.on('show.daterangepicker', this.dispatchEvent.bind(this, 'show'));\r\n    $node.on('hide.daterangepicker', this.dispatchEvent.bind(this, 'hide'));\r\n    $node.on('apply.daterangepicker', this.dispatchEvent.bind(this, 'apply'));\r\n    $node.on('cancel.daterangepicker', this.dispatchEvent.bind(this, 'cancel'));\r\n\r\n    this._daterangepicker = $node.data('daterangepicker');\r\n  },\r\n\r\n  _updateValue (startDate, endDate) {\r\n    let start = this.props.timepicker ? this.props.utc ? startDate.toISOString() : startDate.format('YYYY-MM-DD HH:mm:ss') : this.props.utc ? startDate.toISOString() : startDate.format('YYYY-MM-DD');\r\n    let end = this.props.timepicker ? this.props.utc ? endDate.toISOString() : endDate.format('YYYY-MM-DD HH:mm:ss') : this.props.utc ? endDate.toISOString() : endDate.format('YYYY-MM-DD');\r\n    let prevStart = this.data.start;\r\n    let prevEnd = this.data.end;\r\n\r\n    this._setValue({ start, end });\r\n\r\n    if (this.data.value !== prevStart || this.data.value !== prevEnd) {\r\n      this.dispatchEvent('change');\r\n      this.dispatchEvent('changed');\r\n    }\r\n  },\r\n\r\n  _updateData (event) {\r\n    if (event && this.$node.dirty) {\r\n      dmx.validate(this.$node);\r\n    }\r\n\r\n    this.set('disabled', this.$node.disabled);\r\n    if (this._input.value !== this.data.value || this._input_start !== this.data.start || this._input_end !== this.data.end) {\r\n      this.set({\r\n        value: this._input.value,\r\n        start: this._input_start.value,\r\n        end: this._input_end.value,\r\n      });\r\n      dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n    }\r\n\r\n    if (this.$node.dirty) {\r\n      this.set('invalid', !this.$node.validity.valid);\r\n      this.set('validationMessage', this.$node.validationMessage);\r\n    }\r\n  },\r\n\r\n  _setValue (value, defaultValue) {\r\n    let { start = '', end = '' } = value;\r\n\r\n    if (typeof start !== 'string') start = '';\r\n    if (typeof end !== 'string') end = '';\r\n    \r\n    if (start == 'now' || start == 'today') {\r\n      start = this.props.timepicker ? this.props.utc ? moment().toISOString() : moment().format('YYYY-MM-DD HH:mm:ss') : moment().format('YYYY-MM-DD');\r\n    }\r\n\r\n    if (end == 'now' || end == 'today') {\r\n      end = this.props.timepicker ? this.props.utc ? moment().toISOString() : moment().format('YYYY-MM-DD HH:mm:ss') : moment().format('YYYY-MM-DD');\r\n    }\r\n\r\n    if (start) {\r\n      this._daterangepicker.setStartDate(this._formatDate(start));\r\n    }\r\n\r\n    if (end) {\r\n      this._daterangepicker.setEndDate(this._formatDate(end));\r\n    }\r\n\r\n    this.$node.value = start && end ? this._formatDate(start) + this.props.separator + this._formatDate(end) : '';\r\n    this._input.value = start && end ? start + '/' + end : '';\r\n    this._input_start.value = start || '';\r\n    this._input_end.value = end || '';\r\n\r\n    if (defaultValue) {\r\n      this.$node.defaultValue = this.$node.value;\r\n      this._input.defaultValue = this._input.value;\r\n      this._input_start.defaultValue = this._input_start.value;\r\n      this._input_end.defaultValue = this._input_end.value;\r\n    }\r\n\r\n    this._updateData(true);\r\n  },\r\n\r\n  _getMaxSpan () {\r\n    const { maxspanYears: years, maxspanMonths: months, maxspanWeeks: weeks, maxspanDays: days } = this.props;\r\n\r\n    if (years || months || weeks || days) {\r\n      return { years, months, weeks, days };\r\n    }\r\n  },\r\n\r\n  _applyHandler (event) {\r\n    const prevStart = this.data.start;\r\n    const prevEnd = this.data.end;\r\n\r\n    this._updateValue(this._daterangepicker.startDate, this._daterangepicker.endDate);\r\n    \r\n    if (this._input_start.value !== prevStart || this._input_end.value !== prevEnd) {\r\n      this.dispatchEvent('changed');\r\n    }\r\n  },\r\n\r\n});\r\n"]}